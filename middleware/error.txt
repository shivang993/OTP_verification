class ErrorHandler extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;  
         Error.captureStackTrace(this, this.constructor);         
    }
}

 const errorMiddleware = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
    err.message = err.message || "Internal Server Error";
  
    if(err.name === "CastError"){
        const message = ` Invalid: ${err.path}`;
        err = new ErrorHandler(message, 400);
    }


      if(err.name === "JsonWebTokenError"){
        const message = `Json web token is invalid , Try again`;
        err = new ErrorHandler(message, 400);
    }


       if(err.name === "TokenExpiredError"){
        const message = `Json web token is expired , Try again`;
        err = new ErrorHandler(message, 400);
    }


    // if(err.code === 11000){
    //     const message = `Duplicate ${Object.keys(err.keyValue)} Entered`;
    //     err = new ErrorHandler(message, 400);
    // }



    res.statusCode(err.statusCode).json({
        success: false,
        message: err.message,
    });

}
    

export default ErrorHandler;
export { errorMiddleware };



































































class ErrorHandler extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;  
            Error.captureStackTrace(this, this.constructor);
        return next(new ErrorHandler("Please enter all fields", 400));
      
    }
}
// export default ErrorHandler;
 const errorMiddleware = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
    err.message = err.message || "Internal Server Error";
  
    if(err.name === "CastError"){
        const message = ` Invalid: ${err.path}`;
        err = new ErrorHandler(message, 400);
    }


      if(err.name === "JsonWebTokenError"){
        const message = `Json web token is invalid , Try again`;
        err = new ErrorHandler(message, 400);
    }


       if(err.name === "TokenExpiredError"){
        const message = `Json web token is expired , Try again`;
        err = new ErrorHandler(message, 400);
    }


    if(err.code === 11000){
        const message = `Duplicate ${Object.keys(err.keyValue)} Entered`;
        err = new ErrorHandler(message, 400);
    }



}

 export default ErrorHandler;
export {errorMiddleware};



























// class ErrorHandler extends Error {
//   constructor(message, statusCode) {
//     super(message);
//     this.statusCode = statusCode;

//     Error.captureStackTrace(this, this.constructor);
//   }
// }

// export default ErrorHandler;

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++









// middleware/error.js
// import express from "express";
class ErrorHandler extends Error {
  constructor(message, statusCode) {
    super(message);
    this.statusCode = statusCode;
    Error.captureStackTrace(this, this.constructor);
  }
}


// const app = express();

const errorMiddleware = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.message = err.message || "Internal Server Error";

  if (err.name === "CastError") {
    const message = `Invalid: ${err.path}`;
    err = new ErrorHandler(message, 400);
  }

  if (err.name === "JsonWebTokenError") {
    const message = "Json web token is invalid, Try again";
    err = new ErrorHandler(message, 400);
  }

  if (err.name === "TokenExpiredError") {
    const message = "Json web token is expired, Try again";
    err = new ErrorHandler(message, 400);
  }

  if (err.code === 11000) {
    const message = `Duplicate ${Object.keys(err.keyValue)} Entered`;
    err = new ErrorHandler(message, 400);
  }
  

  res.status(err.statusCode).json({
    success: false,
    message: err.message,
  });
};


// middleware/error.js




export default ErrorHandler;
export { errorMiddleware };
